<% unless @saved -%>
  TracksPages.show_edit_errors(html_for_error_messages());

  function html_for_error_messages() {
    return "<%= escape_javascript(get_list_of_error_messages_for(@todo)) %>";
  }

<% else

  # jquery animations are async, so first collect all animation steps that need
  # to be run sequential,then execute them. All steps are functions which are
  # passed a function as parameter that will execute the next animation steps

  animation = []
  animation << "remove_todo" if update_needs_to_remove_todo_from_container
  if replace_with_updated_todo
    animation << "replace_todo"
  elsif append_updated_todo
    animation << ( update_needs_to_add_new_container ? "insert_new_container_with_updated_todo" : "add_to_existing_container")
  end
  animation << "hide_container" if update_needs_to_hide_container
  animation << "highlight_updated_todo"
  animation << "update_empty_container" if source_view_is_one_of(:tag, :todo, :deferred, :project, :context)
  animation << "update_predecessors"
%>
  TracksPages.page_notify('notice', '<%=escape_javascript @status_message%>', 5);
  <%= render_animation(animation) %>

function remove_todo(next_steps) {
  $('#<%= dom_id(@todo) %>').fadeOut(400, function() {
    $('#<%= dom_id(@todo) %>').remove();
    <% if source_view_is :calendar
         # in calendar view it is possible to have a todo twice on the page
    -%>
         $('#<%= dom_id(@todo) %>').remove();
    <% end %>
    <%= show_empty_message_in_source_container -%>
    next_steps.go();
  });
}

function add_to_existing_container(next_steps) {
  $('#<%= item_container_id(@todo) %>_items').append(html_for_todo());
  <% if source_view_is_one_of(:project,:calendar) -%>
    next_steps.go();
    <% if (@target_context_count==1) || ( (@todo.deferred? || @todo.pending?) && @remaining_deferred_or_pending_count == 1) -%>
      $("#<%=  empty_container_msg_div_id %>").slideUp(100);
    <% end -%>
  <% else -%>
    <% unless (@todo_hidden_state_changed && @todo.hidden?) || @todo_was_deferred_from_active_state -%>
      $('#<%= item_container_id(@todo) %>').fadeIn(500, function() {
        next_steps.go();
        <% if @target_context_count==1 -%>
          $("#<%=  empty_container_msg_div_id %>").slideUp(100);
        <% end -%>
      });
    <% else -%>
      next_steps.go();
      <% if (@target_context_count==1) ||
        ( (@todo.deferred? || @todo.pending?) && @remaining_deferred_or_pending_count == 1) ||
        ( @todo.hidden?                       && @remaining_hidden_count == 1)
      -%>
        $("#<%=  empty_container_msg_div_id %>").slideUp(100);
      <% end -%>
    <% end -%>
  <% end -%>
}

function replace_todo(next_steps) {
  $('#<%= dom_id(@todo) %>').html(html_for_todo());
  next_steps.go();
}

function hide_container(next_steps) {
  $('#<%= item_container_id(@original_item) %>').fadeOut(400, function(){ next_steps.go(); });
  <%= "$('#deferred_pending_container_empty-nd').slideDown(400);".html_safe if source_view_is(:deferred) && @down_count == 0 %>
}

function highlight_updated_todo(next_steps) {
  $('#<%= dom_id(@todo)%>').effect('highlight', {}, 2000, function(){ });
  next_steps.go();
}

function update_empty_container(next_steps) {
  <% if @down_count==0 -%>
    $('div#no_todos_in_view').slideDown(400, function(){ next_steps.go(); });
  <% else -%>
    $('div#no_todos_in_view').fadeOut(100, function(){ next_steps.go(); });
  <% end -%>
}

function insert_new_container_with_updated_todo(next_steps) {
  $('#display_box').prepend(html_for_new_container());
  $('#<%= item_container_id(@todo) %>').fadeIn(500, function() { next_steps.go(); });
}

function html_for_todo() {
  return "<%= escape_javascript(render(:partial => @todo, :locals => { :parent_container_type => parent_container_type })) %>";
}

function html_for_new_container() {
  return "<%= ( @new_context_created || @new_project_created ) ? escape_javascript(render(:partial => @new_container, :locals => { :settings => {:collapsible => true }})) : "" %>";
}

function update_predecessors(next_steps) {
  regenerate_predecessor_family();
  <% if @removed_predecessors
    @removed_predecessors.each do |p| -%>
      if ($('#<%=item_container_id(p)%>')) {
        $('#<%=dom_id(p)%>').html('<%=escape_javascript(render(:partial => p, :locals => { :settings => {:parent_container_type => parent_container_type }}))%>');
      }
    <% end -%>
  <% end -%>
  next_steps.go();
}

function regenerate_predecessor_family() {
<%
  parents = @todo.predecessors
  until parents.empty?
    parent = parents.pop
    parents += parent.predecessors 
-%>
    $('#<%= dom_id(parent) %>').html("<%= escape_javascript(render(:partial => parent, :locals => { :settings => {:parent_container_type => parent_container_type }})) %>");
<%
  end
-%>
}

<% end %>
